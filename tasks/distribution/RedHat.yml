---
- name: "install packages for pxe"
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ pxe_packages }}"


- name: "configure nginx"
  template:
    src: nginx.conf.j2
    dest: "{{ pxe_nginx_config_file }}"
    mode: 0644
    owner: root
    group: root


- name: create pxe directory structure
  file:
    state: directory
    path: "{{ pxe_dir_base }}/{{ item }}"
    mode: 0777
    owner: root
    group: root
    recurse: "yes"
  loop: "{{ pxe_dir_structure }}"


- name: "empty syslinux files"
  shell: "rm -rf {{ pxe_dir_base }}/syslinux/{{ item }}/*"
  # file: 
  #   path: "{{ pxe_dir_base }}/syslinux/{{ item }}/*"
  #   state: absent
  loop:
    - bios
    - efi64


- name: "copy syslinux files"
  unarchive:
    src: "syslinux/{{ item }}.tar.gz"
    dest: "{{ pxe_dir_base }}/syslinux/"
    mode: 0777
    owner: root
    group: root
  loop:
    - bios
    - efi64


# - name: "copy syslinux files"
#   copy:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     remote_src: "yes"
#     mode: 0777
#     owner: root
#     group: root
#   with_items:
#     - "{{ pxe_syslinux_files_redhat }}"


- name: create symlinks of os for syslinux
  file:
    src: '{{ item.src }}'
    path: '{{ item.dest }}'
    state: link
    mode: 0777
    owner: root
    group: root
  with_items:
    - { src: "../../os", dest: "{{ pxe_dir_base }}/syslinux/bios/os" }
    - { src: "../../os", dest: "{{ pxe_dir_base }}/syslinux/efi64/os" }
    - { src: "../../menu/bios", dest: "{{ pxe_dir_base }}/syslinux/bios/pxelinux.cfg" }
    - { src: "../../menu/efi64", dest: "{{ pxe_dir_base }}/syslinux/efi64/pxelinux.cfg" }


- name: configure tftp server
  copy:
    dest: "{{ pxe_tftp_service_file }}"
    content: |
      [Unit]
      Description=Tftp Server
      Requires=tftp.socket
      Documentation=man:in.tftpd
      [Service]
      ExecStart=/usr/sbin/in.tftpd --secure -v /srv/tftp
      StandardInput=socket
      [Install]
      Also=tftp.socket
    mode: 0644
    owner: root
    group: root


- name: systemctl reload
  shell: systemctl daemon-reload


- name: restart services
  service:
    name: "{{ item }}"
    daemon_reload: "yes"
    state: restarted
    enabled: "yes"
  loop: "{{ pxe_services }}"
